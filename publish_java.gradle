apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    if(project.hasProperty("android")) {
        from android.sourceSets.main.java.sourceFiles
    }
}

task androidNativeJar(type: Jar) {
    classifier = 'so'
    from(new File(buildDir, 'libs'))
    include("**/*.so")
}

task androidNativeZip(type: Zip) {
    classifier = 'so'
    from(new File(buildDir, 'libs'))
    include("**/*.so")
}

//task gradlePluginJar(type: Copy) {
//
//    println "gradle plugin from: ${bs.list()}"
//    include("**/*.jar")
//
//    from(bs)
//}

publishing {
    repositories {
        maven {
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }

            if (isReleaseBuild()) {
                url getReleaseRepositoryUrl()
            } else {
                url getSnapshotRepositoryUrl()
            }
        }
    }

}

project.tasks.whenObjectAdded { Task t->
    if( t.class.name == "org.gradle.api.publish.maven.tasks.PublishToMavenLocal_Decorated") {
        t.doLast {
            String repoUrl = it.getMavenRepositoryLocator().getLocalMavenRepository()
            String group = it.getPublication().getGroupId()
            group = group.replace(".", File.separator)
            String artifact = it.getPublication().getArtifactId()
            String version = it.getPublication().getVersion()
            String uploadUrl = repoUrl + File.separator + group + File.separator + artifact + File.separator + version
            println("Uploading " + uploadUrl)
        }
    }else if (t.class.name == "org.gradle.api.publish.maven.tasks.PublishToMavenRepository_Decorated") {
        t.doLast {
            String repoUrl = it.getRepository().getUrl()
            String group = it.getPublication().getGroupId()
            group = group.replace(".", File.separator)
            String artifact = it.getPublication().getArtifactId()
            String version = it.getPublication().getVersion()
            String uploadUrl = repoUrl + File.separator + group + File.separator + artifact + File.separator + version
            println("Uploading " + uploadUrl)
        }
    }
}

